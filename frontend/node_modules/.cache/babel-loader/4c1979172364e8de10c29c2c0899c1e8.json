{"ast":null,"code":"import { GET_PLAYERS, SET_STAGE, START_GAME, CHANGE_PLAYER_VIEW } from './types';\nexport const getPlayersInRoom = room_id => async dispatch => {\n  const url = \"http://localhost:3000/players-in-room/\".concat(room_id);\n  var res = await fetch(url);\n  var players = await res.json();\n  var playerNames = [];\n  players.map(player => playerNames.push(player.name));\n  dispatch({\n    type: GET_PLAYERS,\n    playerNames,\n    players\n  });\n};\nexport const setStage = () => dispatch => {\n  dispatch({\n    type: SET_STAGE\n  });\n};\nexport const startingGame = () => dispatch => {\n  dispatch({\n    type: START_GAME\n  });\n};\nexport const changePlayerView = () => dispatch => {\n  dispatch({\n    type: CHANGE_PLAYER_VIEW\n  });\n};\nexport const generateQuestionsForRound = room => async dispatch => {\n  const url = 'http://localhost:3000/collectioncards';\n  var res = await fetch(url);\n  var questions = await res.json();\n  const url2 = 'http://localhost:3000/players-in-game/';\n  var res2 = await fetch(url2);\n  var allPlayers = await res2.json();\n  var playersInRoom = allPlayers.filter(player => player.room_id === room);\n  var count = 0;\n  playersInRoom.forEach(player => {\n    if (player.questions === null) {\n      player.questions = [];\n    }\n\n    if (player.answers === null) {\n      player.answers = [];\n    }\n  });\n\n  while (count !== playersInRoom.length * 2) {\n    var user1 = playersInRoom[Math.floor(Math.random() * playersInRoom.length)];\n    var user2 = playersInRoom[Math.floor(Math.random() * playersInRoom.length)];\n\n    if (user1.name === user2.name || user1.questions.length === 2 || user2.questions.length === 2) {\n      continue;\n    }\n\n    if (user1.questions[user1.questions.length - 1] === user2.questions[user2.questions.length - 1] && user1.questions[user1.questions.length - 1] !== undefined) {\n      continue;\n    }\n\n    user1.questions.push(questions[Math.floor(Math.random() * questions.length)]);\n    var addedQuestion = user1.questions[user1.questions.length - 1];\n    var index = questions.indexOf(addedQuestion);\n    questions.splice(index, 1);\n    user2.questions.push(user1.questions[user1.questions.length - 1]);\n    debugger; // eslint-disable-next-line no-loop-func\n\n    playersInRoom.forEach(player => {\n      if (user1.name === player.name) {\n        player.questions = user1.questions;\n      }\n\n      if (user2.name === player.name) {\n        player.questions = user2.questions;\n      }\n    });\n    count++;\n  }\n\n  console.log(\"if I have three users, there should be six questions in total: Everyone should have four prompts\", playersInRoom);\n};","map":{"version":3,"sources":["/Users/mmevansjr/dev/mod5/frontend/src/actions/gameActions.js"],"names":["GET_PLAYERS","SET_STAGE","START_GAME","CHANGE_PLAYER_VIEW","getPlayersInRoom","room_id","dispatch","url","res","fetch","players","json","playerNames","map","player","push","name","type","setStage","startingGame","changePlayerView","generateQuestionsForRound","room","questions","url2","res2","allPlayers","playersInRoom","filter","count","forEach","answers","length","user1","Math","floor","random","user2","undefined","addedQuestion","index","indexOf","splice","console","log"],"mappings":"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","sourcesContent":["import { GET_PLAYERS, SET_STAGE, START_GAME, CHANGE_PLAYER_VIEW} from './types'\n\nexport const getPlayersInRoom = (room_id) => async dispatch => {\n    const url = `http://localhost:3000/players-in-room/${room_id}`\n    var res = await fetch(url)\n    var players = await res.json();\n    var playerNames = [];\n    players.map((player) => (\n        playerNames.push(player.name)\n    ))\n    dispatch({\n        type: GET_PLAYERS,\n        playerNames,\n        players\n    })\n}\n\nexport const setStage = () => dispatch => {\n    dispatch({\n        type: SET_STAGE\n    })\n}\n\nexport const startingGame = () => dispatch =>  {\n    dispatch({\n        type: START_GAME\n    })\n}\n\nexport const changePlayerView = () => dispatch => {\n    dispatch({\n        type: CHANGE_PLAYER_VIEW\n    })\n}\n\nexport const generateQuestionsForRound = (room) => async dispatch => {\n\n    const url = 'http://localhost:3000/collectioncards'\n    var res = await fetch(url)\n    var questions = await res.json();\n\n    const url2 = 'http://localhost:3000/players-in-game/'\n    var res2 = await fetch(url2)\n    var allPlayers = await res2.json()\n\n    var playersInRoom = allPlayers.filter((player) => player.room_id === room)\n\n\n    var count = 0;\n\n    playersInRoom.forEach((player) => {\n        if(player.questions === null) {\n            player.questions = [];\n        }\n        if(player.answers === null) {\n            player.answers = [];\n        }\n    })\n\n    while(count !== ((playersInRoom.length * 2))) {\n        var user1 = playersInRoom[Math.floor(Math.random() * playersInRoom.length)]\n        var user2 = playersInRoom[Math.floor(Math.random() * playersInRoom.length)]\n        if(user1.name === user2.name || user1.questions.length === 2 || user2.questions.length === 2) {\n            continue\n        }\n        if((user1.questions[user1.questions.length-1] === user2.questions[user2.questions.length-1]) && user1.questions[user1.questions.length-1] !== undefined) {\n            continue\n        }\n        user1.questions.push(questions[Math.floor(Math.random() * questions.length)])\n\n        var addedQuestion = user1.questions[user1.questions.length-1]\n        var index = questions.indexOf(addedQuestion)\n        questions.splice(index, 1)\n        user2.questions.push(user1.questions[user1.questions.length-1])\n        debugger\n        // eslint-disable-next-line no-loop-func\n        playersInRoom.forEach((player) => {\n            if(user1.name === player.name) {\n                player.questions = user1.questions\n            }\n            if(user2.name === player.name) {\n                player.questions = user2.questions\n            }\n        })\n        count++;\n    }\n\n    console.log(\"if I have three users, there should be six questions in total: Everyone should have four prompts\", playersInRoom)\n}"]},"metadata":{},"sourceType":"module"}