{"ast":null,"code":"import _defineProperty from \"/Users/mmevansjr/dev/mod5/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { GET_PLAYERS, SET_STAGE, START_GAME, CHANGE_PLAYER_VIEW, SET_QUESTIONS, UPDATE_ROUND_1, ADD_QUESTIONS, ADD_POINTS, SELECT_ROUND_WINNER, UPDATE_ROUND_1_QUESTIONS } from \"../actions/types\";\nconst initialState = {\n  playerNames: [],\n  playersInRoom: [],\n  questions_round_1: null,\n  questions_round_2: null,\n  gameStarted: false,\n  playerView: false,\n  stage: 1,\n  count_of_answers: 0,\n  round_winner: '',\n  round_winner_points: 0\n};\n\nfunction gameReducer(state = initialState, action) {\n  switch (action.type) {\n    case GET_PLAYERS:\n      return _objectSpread({}, state, {\n        playerNames: action.playerNames,\n        playersInRoom: action.players\n      });\n\n    case SET_STAGE:\n      return _objectSpread({}, state, {\n        stage: state.stage + 1\n      });\n\n    case START_GAME:\n      return _objectSpread({}, state, {\n        gameStarted: true\n      });\n\n    case CHANGE_PLAYER_VIEW:\n      return _objectSpread({}, state, {\n        playerView: true\n      });\n\n    case SET_QUESTIONS:\n      return _objectSpread({}, state, {\n        playersInRoom: action.updatedPlayers\n      });\n\n    case UPDATE_ROUND_1:\n      return _objectSpread({}, state, {\n        selectedQuestion: action.selectedQuestion,\n        playersInRoom: action.allPlayersInGame,\n        questions_round_1: state.questions_round_1.map(question => {\n          return _objectSpread({}, question, {\n            answers: action.allPlayersInGame.filter(player => question.players.includes(player.name)).map(player => {\n              let indexOfQuestion = player.questions_round_1.findIndex(playerQuestion => playerQuestion.prompt === question.prompt);\n              return player.answers_round_1[indexOfQuestion];\n            })\n          });\n        })\n      });\n\n    case ADD_QUESTIONS:\n      return _objectSpread({}, state, {\n        questions_round_1: action.questions_round_1,\n        questions_round_2: action.question_round_2\n      });\n\n    case ADD_POINTS:\n      if (state.count_of_answers <= state.playerNames.length + 1) {\n        return _objectSpread({}, state, {\n          // eslint-disable-next-line array-callback-return\n          question_round_1: state.questions_round_1.map(question => {\n            if (question.answers[0] === action.answer) {\n              return _objectSpread({}, question, {\n                points_player_1: state.questions_round_1[0].points_player_1 += 1\n              });\n            }\n\n            if (question.answers[1] === action.answer) {\n              return _objectSpread({}, question, {\n                points_player_1: state.questions_round_1[0].points_player_2 += 1\n              });\n            }\n          }),\n          count_of_answers: state.count_of_answers + 1\n        });\n      }\n\n    // eslint-disable-next-line no-fallthrough\n\n    case SELECT_ROUND_WINNER:\n      if (state.count_of_answers === 3) {\n        var winner = '';\n        var winner_points = 0;\n\n        if (state.questions_round_1[0].points_player_1 > state.questions_round_1[0].points_player_2) {\n          winner = state.questions_round_1[0].players[0];\n          winner_points = state.questions_round_1[0].points_player_1;\n        } else {\n          winner = state.questions_round_1[0].players[1];\n          winner_points = state.questions_round_1[0].points_player_2;\n        }\n      }\n\n      return _objectSpread({}, state, {\n        round_winner: winner,\n        round_winner_points: winner_points\n      });\n\n    case UPDATE_ROUND_1_QUESTIONS:\n      if (state.selectedQuestion === 0) return _objectSpread({}, state, {\n        selectedQuestion: 1\n      });\n    // eslint-disable-next-line no-fallthrough\n\n    default:\n      return _objectSpread({}, state);\n  }\n}\n\nexport default gameReducer;","map":{"version":3,"sources":["/Users/mmevansjr/dev/mod5/frontend/src/reducers/gameReducer.js"],"names":["GET_PLAYERS","SET_STAGE","START_GAME","CHANGE_PLAYER_VIEW","SET_QUESTIONS","UPDATE_ROUND_1","ADD_QUESTIONS","ADD_POINTS","SELECT_ROUND_WINNER","UPDATE_ROUND_1_QUESTIONS","initialState","playerNames","playersInRoom","questions_round_1","questions_round_2","gameStarted","playerView","stage","count_of_answers","round_winner","round_winner_points","gameReducer","state","action","type","players","updatedPlayers","selectedQuestion","allPlayersInGame","map","question","answers","filter","player","includes","name","indexOfQuestion","findIndex","playerQuestion","prompt","answers_round_1","question_round_2","length","question_round_1","answer","points_player_1","points_player_2","winner","winner_points"],"mappings":"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","sourcesContent":["import { GET_PLAYERS, SET_STAGE, START_GAME, CHANGE_PLAYER_VIEW, SET_QUESTIONS, UPDATE_ROUND_1, ADD_QUESTIONS, ADD_POINTS, SELECT_ROUND_WINNER, UPDATE_ROUND_1_QUESTIONS } from \"../actions/types\";\n\nconst initialState = {\n  playerNames: [],\n  playersInRoom: [],\n  questions_round_1: null,\n  questions_round_2: null,\n  gameStarted: false,\n  playerView: false,\n  stage: 1,\n  count_of_answers: 0,\n  round_winner: '',\n  round_winner_points: 0\n}\n\nfunction gameReducer(state = initialState, action) {\n  switch (action.type) {\n    case GET_PLAYERS:\n      return {\n        ...state,\n        playerNames: action.playerNames,\n        playersInRoom: action.players\n      }\n    case SET_STAGE:\n      return {\n        ...state,\n        stage: state.stage + 1\n      }\n    case START_GAME:\n      return {\n        ...state,\n        gameStarted: true\n      }\n    case CHANGE_PLAYER_VIEW:\n      return {\n        ...state,\n        playerView: true\n      }\n    case SET_QUESTIONS:\n      return {\n        ...state,\n        playersInRoom: action.updatedPlayers\n      }\n    case UPDATE_ROUND_1:\n      return {\n        ...state,\n        selectedQuestion: action.selectedQuestion,\n        playersInRoom: action.allPlayersInGame,\n        questions_round_1: state.questions_round_1.map(question => {\n          return {\n            ...question, answers: action.allPlayersInGame\n              .filter(player => question.players.includes(player.name))\n              .map(player => {\n                let indexOfQuestion = player.questions_round_1.findIndex(playerQuestion => playerQuestion.prompt === question.prompt)\n                return player.answers_round_1[indexOfQuestion]\n              })\n          }\n        })\n      }\n    case ADD_QUESTIONS:\n      return {\n        ...state,\n        questions_round_1: action.questions_round_1,\n        questions_round_2: action.question_round_2\n      }\n    case ADD_POINTS:\n      if(state.count_of_answers <= state.playerNames.length + 1) {\n        return {\n          ...state,\n          // eslint-disable-next-line array-callback-return\n          question_round_1: state.questions_round_1.map(question => {\n            if(question.answers[0] === action.answer) {\n              return {...question, points_player_1: state.questions_round_1[0].points_player_1 += 1}\n            } \n            if(question.answers[1] === action.answer) {\n              return {...question, points_player_1: state.questions_round_1[0].points_player_2 += 1}\n            }\n          }),\n          count_of_answers: state.count_of_answers + 1\n        }\n      }\n    // eslint-disable-next-line no-fallthrough\n    case SELECT_ROUND_WINNER:\n      if(state.count_of_answers === 3) {\n        var winner = ''\n        var winner_points = 0\n        if(state.questions_round_1[0].points_player_1 > state.questions_round_1[0].points_player_2) {\n          winner = state.questions_round_1[0].players[0]\n          winner_points = state.questions_round_1[0].points_player_1\n        } else {\n          winner = state.questions_round_1[0].players[1]\n          winner_points = state.questions_round_1[0].points_player_2\n        }\n      }\n      return {\n        ...state,\n        round_winner: winner,\n        round_winner_points: winner_points\n      }\n    case UPDATE_ROUND_1_QUESTIONS:\n      if(state.selectedQuestion === 0)\n      return {\n        ...state,\n        selectedQuestion: 1\n      }\n    // eslint-disable-next-line no-fallthrough\n    default:\n  return {\n    ...state\n  }\n}\n}\n\nexport default gameReducer\n\n"]},"metadata":{},"sourceType":"module"}