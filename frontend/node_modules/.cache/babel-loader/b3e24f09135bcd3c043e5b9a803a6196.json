{"ast":null,"code":"import { GET_PLAYERS, SET_STAGE, START_GAME, CHANGE_PLAYER_VIEW, ADD_ANSWERS, UPDATE_PLAYERS, ADD_QUESTIONS } from './types';\nexport const getPlayersInRoom = room_id => async dispatch => {\n  const url = \"http://localhost:3000/players-in-room/\".concat(room_id);\n  var res = await fetch(url);\n  var players = await res.json();\n  var playerNames = [];\n  players.map(player => playerNames.push(player.name));\n  dispatch({\n    type: GET_PLAYERS,\n    playerNames,\n    players\n  });\n};\nexport const setStage = () => dispatch => {\n  dispatch({\n    type: SET_STAGE\n  });\n};\nexport const startingGame = () => dispatch => {\n  dispatch({\n    type: START_GAME\n  });\n};\nexport const changePlayerView = () => dispatch => {\n  dispatch({\n    type: CHANGE_PLAYER_VIEW\n  });\n};\nexport const generateQuestions = room => async dispatch => {\n  const url = 'http://localhost:3000/collectioncards';\n  var res = await fetch(url);\n  var questions = await res.json();\n  const url2 = 'http://localhost:3000/players-in-game/';\n  var res2 = await fetch(url2);\n  var allPlayers = await res2.json();\n  var playersInRoom = allPlayers.filter(player => player.room_id === room);\n  var count = 0;\n  playersInRoom.forEach(player => {\n    player.questions_round_1 = [];\n    player.questions_round_2 = [];\n    player.questions_round_3 = [];\n    player.answers_round_1 = [];\n    player.answers_round_2 = [];\n    player.answers_round_3 = [];\n  });\n  var questionArray = [];\n\n  while (count !== playersInRoom.length) {\n    var question = {};\n    var user1 = playersInRoom[Math.floor(Math.random() * playersInRoom.length)];\n    var user2 = playersInRoom[Math.floor(Math.random() * playersInRoom.length)];\n\n    if (user1.name === user2.name || user1.questions_round_1.length === 2 || user2.questions_round_1.length === 2 || user1.questions_round_1[user1.questions_round_1.length - 1] === user2.questions_round_1[user2.questions_round_1.length - 1] && user1.questions_round_1[0] !== undefined) {\n      continue;\n    }\n\n    user1.questions_round_1.push(questions[Math.floor(Math.random() * questions.length)]);\n    var addedQuestion = user1.questions_round_1[user1.questions_round_1.length - 1];\n    var index = questions.indexOf(addedQuestion);\n    questions.splice(index, 1);\n    user2.questions_round_1.push(user1.questions_round_1[user1.questions_round_1.length - 1]); // eslint-disable-next-line no-loop-func\n\n    playersInRoom.forEach(player => {\n      if (user1.name === player.name) {\n        player.questions_round_1 = user1.questions_round_1;\n      }\n\n      if (user2.name === player.name) {\n        player.questions_round_1 = user2.questions_round_1;\n      }\n    });\n    question = {\n      question: addedQuestion.prompt,\n      player1: user1.name,\n      answer1: '',\n      player2: user2.name,\n      answer2: ''\n    };\n    questionArray.push(question);\n    count++;\n  }\n\n  var count2 = 0;\n\n  while (count2 !== playersInRoom.length) {\n    var questionRound2 = {};\n    user1 = playersInRoom[Math.floor(Math.random() * playersInRoom.length)];\n    user2 = playersInRoom[Math.floor(Math.random() * playersInRoom.length)];\n\n    if (user1.name === user2.name || user1.questions_round_2.length === 2 || user2.questions_round_2.length === 2 || user1.questions_round_2[user1.questions_round_2.length - 1] === user2.questions_round_2[user2.questions_round_2.length - 1] && user1.questions_round_2[0] !== undefined) {\n      continue;\n    }\n\n    user1.questions_round_2.push(questions[Math.floor(Math.random() * questions.length)]);\n    addedQuestion = user1.questions_round_2[user1.questions_round_2.length - 1];\n    index = questions.indexOf(addedQuestion);\n    questions.splice(index, 1);\n    user2.questions_round_2.push(user1.questions_round_2[user1.questions_round_2.length - 1]); // eslint-disable-next-line no-loop-func\n\n    playersInRoom.forEach(player => {\n      if (user1.name === player.name) {\n        player.questions_round_2 = user1.questions_round_2;\n      }\n\n      if (user2.name === player.name) {\n        player.questions_round_2 = user2.questions_round_2;\n      }\n    });\n    questionRound2 = {\n      question: addedQuestion.prompt,\n      player1: user1.name,\n      answer1: '',\n      player2: user2.name,\n      answer2: ''\n    };\n    questionArray.push(questionRound2);\n    count2++;\n  }\n\n  playersInRoom.forEach(player => {\n    player.questions_round_3.push(questions[0], questions[1]);\n  });\n  const url3 = 'http://localhost:3000/update-players';\n  const settings3 = {\n    method: 'PATCH',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      playersInRoom\n    })\n  };\n  console.log(\"This should have all questions\", questionArray);\n  dispatch({\n    type: ADD_QUESTIONS,\n    questionArray\n  });\n  const updatingPlayers = await fetch(url3, settings3);\n};\nexport const addPlayersAnswers = player => dispatch => {\n  dispatch({\n    type: ADD_ANSWERS,\n    player\n  });\n};\nexport const updatePlayerAnswers = allPlayersInGame => dispatch => {\n  console.log(allPlayersInGame);\n  dispatch({\n    type: UPDATE_PLAYERS,\n    allPlayersInGame\n  });\n}; // this will be how many questions will be answered in the round","map":{"version":3,"sources":["/Users/mmevansjr/dev/mod5/frontend/src/actions/gameActions.js"],"names":["GET_PLAYERS","SET_STAGE","START_GAME","CHANGE_PLAYER_VIEW","ADD_ANSWERS","UPDATE_PLAYERS","ADD_QUESTIONS","getPlayersInRoom","room_id","dispatch","url","res","fetch","players","json","playerNames","map","player","push","name","type","setStage","startingGame","changePlayerView","generateQuestions","room","questions","url2","res2","allPlayers","playersInRoom","filter","count","forEach","questions_round_1","questions_round_2","questions_round_3","answers_round_1","answers_round_2","answers_round_3","questionArray","length","question","user1","Math","floor","random","user2","undefined","addedQuestion","index","indexOf","splice","prompt","player1","answer1","player2","answer2","count2","questionRound2","url3","settings3","method","headers","body","JSON","stringify","console","log","updatingPlayers","addPlayersAnswers","updatePlayerAnswers","allPlayersInGame"],"mappings":"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","sourcesContent":["import { GET_PLAYERS, SET_STAGE, START_GAME, CHANGE_PLAYER_VIEW, ADD_ANSWERS, UPDATE_PLAYERS, ADD_QUESTIONS} from './types'\n\nexport const getPlayersInRoom = (room_id) => async dispatch => {\n    const url = `http://localhost:3000/players-in-room/${room_id}`\n    var res = await fetch(url)\n    var players = await res.json();\n    var playerNames = [];\n    players.map((player) => (\n        playerNames.push(player.name)\n    ))\n    dispatch({\n        type: GET_PLAYERS,\n        playerNames,\n        players\n    })\n}\n\nexport const setStage = () => dispatch => {\n    dispatch({\n        type: SET_STAGE\n    })\n}\n\nexport const startingGame = () => dispatch =>  {\n    dispatch({\n        type: START_GAME\n    })\n}\n\nexport const changePlayerView = () => dispatch => {\n    dispatch({\n        type: CHANGE_PLAYER_VIEW\n    })\n}\n\nexport const generateQuestions = (room) => async dispatch => {\n\n    const url = 'http://localhost:3000/collectioncards'\n    var res = await fetch(url)\n    var questions = await res.json();\n\n    const url2 = 'http://localhost:3000/players-in-game/'\n    var res2 = await fetch(url2)\n    var allPlayers = await res2.json()\n\n    var playersInRoom = allPlayers.filter((player) => player.room_id === room)\n\n\n    var count = 0;\n\n    playersInRoom.forEach((player) => {\n            player.questions_round_1 = [];\n            player.questions_round_2 = [];\n            player.questions_round_3 = [];\n            player.answers_round_1 = [];\n            player.answers_round_2 = [];\n            player.answers_round_3 = [];\n    })\n\n    var questionArray = []\n\n    while(count !== (playersInRoom.length)) {\n        var question = {}\n        var user1 = playersInRoom[Math.floor(Math.random() * playersInRoom.length)]\n        var user2 = playersInRoom[Math.floor(Math.random() * playersInRoom.length)]\n        if(user1.name === user2.name || user1.questions_round_1.length === 2 || user2.questions_round_1.length === 2  || ((user1.questions_round_1[user1.questions_round_1.length-1] === user2.questions_round_1[user2.questions_round_1.length-1]) && user1.questions_round_1[0] !== undefined)) {\n            continue\n        }\n        user1.questions_round_1.push(questions[Math.floor(Math.random() * questions.length)])\n        var addedQuestion = user1.questions_round_1[user1.questions_round_1.length-1]\n        var index = questions.indexOf(addedQuestion)\n        questions.splice(index, 1)\n        user2.questions_round_1.push(user1.questions_round_1[user1.questions_round_1.length-1])\n        // eslint-disable-next-line no-loop-func\n        playersInRoom.forEach((player) => {\n            if(user1.name === player.name) {\n                player.questions_round_1 = user1.questions_round_1\n            }\n            if(user2.name === player.name) {\n                player.questions_round_1 = user2.questions_round_1\n            }\n        })\n        question = {\n            question: addedQuestion.prompt,\n            player1: user1.name,\n            answer1: '',\n            player2: user2.name,\n            answer2: ''\n        }\n        questionArray.push(question)\n        count++;\n    }\n\n    var count2 = 0\n    while(count2 !== (playersInRoom.length)) {\n        var questionRound2 = {}\n         user1 = playersInRoom[Math.floor(Math.random() * playersInRoom.length)]\n         user2 = playersInRoom[Math.floor(Math.random() * playersInRoom.length)]\n        if(user1.name === user2.name || user1.questions_round_2.length === 2 || user2.questions_round_2.length === 2  || ((user1.questions_round_2[user1.questions_round_2.length-1] === user2.questions_round_2[user2.questions_round_2.length-1]) && user1.questions_round_2[0] !== undefined)) {\n            continue\n        }\n        user1.questions_round_2.push(questions[Math.floor(Math.random() * questions.length)])\n        addedQuestion = user1.questions_round_2[user1.questions_round_2.length-1]\n        index = questions.indexOf(addedQuestion)\n        questions.splice(index, 1)\n        user2.questions_round_2.push(user1.questions_round_2[user1.questions_round_2.length-1])\n        // eslint-disable-next-line no-loop-func\n        playersInRoom.forEach((player) => {\n            if(user1.name === player.name) {\n                player.questions_round_2 = user1.questions_round_2\n            }\n            if(user2.name === player.name) {\n                player.questions_round_2 = user2.questions_round_2\n            }\n        })\n        questionRound2 = {\n            question: addedQuestion.prompt,\n            player1: user1.name,\n            answer1: '',\n            player2: user2.name,\n            answer2: ''\n        }\n        questionArray.push(questionRound2)\n        count2++;\n    }\n    playersInRoom.forEach((player) => {\n        player.questions_round_3.push(questions[0], questions[1])\n    })\n    const url3 = 'http://localhost:3000/update-players'\n    const settings3 = {\n        method: 'PATCH',\n        headers: \n            {\n                'Content-Type': 'application/json'\n            },\n        body: JSON.stringify({playersInRoom})\n    }\n    console.log(\"This should have all questions\", questionArray)\n    \n    dispatch({\n        type: ADD_QUESTIONS,\n        questionArray\n    })\n    const updatingPlayers = await fetch(url3, settings3)\n}\n\nexport const addPlayersAnswers = (player) => dispatch => {\n    dispatch({\n        type: ADD_ANSWERS,\n        player\n    })\n}\n\nexport const updatePlayerAnswers = (allPlayersInGame) => dispatch => {\n    console.log(allPlayersInGame)\n    dispatch({\n        type: UPDATE_PLAYERS,\n        allPlayersInGame\n    })\n}\n// this will be how many questions will be answered in the round"]},"metadata":{},"sourceType":"module"}