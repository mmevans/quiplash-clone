{"ast":null,"code":"import _defineProperty from \"/Users/mmevansjr/dev/mod5/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { GET_PLAYERS, SET_STAGE, START_GAME, CHANGE_PLAYER_VIEW, SET_QUESTIONS, ADD_ANSWERS, UPDATE_PLAYERS, ADD_QUESTIONS } from \"../actions/types\";\nconst initialState = {\n  playerNames: [],\n  playersInRoom: [],\n  questions: null,\n  gameStarted: false,\n  playerView: false,\n  stage: 1\n};\n\nfunction gameReducer(state = initialState, action) {\n  switch (action.type) {\n    case GET_PLAYERS:\n      return _objectSpread({}, state, {\n        playerNames: action.playerNames,\n        playersInRoom: action.players\n      });\n\n    case SET_STAGE:\n      return _objectSpread({}, state, {\n        stage: state.stage + 1\n      });\n\n    case START_GAME:\n      return _objectSpread({}, state, {\n        gameStarted: true\n      });\n\n    case CHANGE_PLAYER_VIEW:\n      return _objectSpread({}, state, {\n        playerView: true\n      });\n\n    case SET_QUESTIONS:\n      return _objectSpread({}, state, {\n        playersInRoom: action.updatedPlayers\n      });\n\n    case ADD_ANSWERS:\n      return _objectSpread({}, state, {\n        playersInRoom: state.playersInRoom.map(p => p.name === action.player.playerName ? _objectSpread({}, p, {\n          answers_round_1: action.player.answers\n        }) : p)\n      });\n\n    case UPDATE_PLAYERS:\n      return _objectSpread({}, state, {\n        playersInRoom: action.playersInRoom,\n        questions: state.questions.map(question => {\n          return _objectSpread({}, question, {\n            answers: action.playersInRoom.map(player => {\n              let indexOfQuestion = player.questions_round_1.findIndex(playerQuestion => playerQuestion.prompt === question.prompt);\n              return player.answers_round_1[indexOfQuestion];\n            })\n          });\n        })\n      });\n\n    case ADD_QUESTIONS:\n      return _objectSpread({}, state, {\n        questions: action.questionArray\n      });\n\n    default:\n      return _objectSpread({}, state);\n  }\n}\n\nexport default gameReducer;","map":{"version":3,"sources":["/Users/mmevansjr/dev/mod5/frontend/src/reducers/gameReducer.js"],"names":["GET_PLAYERS","SET_STAGE","START_GAME","CHANGE_PLAYER_VIEW","SET_QUESTIONS","ADD_ANSWERS","UPDATE_PLAYERS","ADD_QUESTIONS","initialState","playerNames","playersInRoom","questions","gameStarted","playerView","stage","gameReducer","state","action","type","players","updatedPlayers","map","p","name","player","playerName","answers_round_1","answers","question","indexOfQuestion","questions_round_1","findIndex","playerQuestion","prompt","questionArray"],"mappings":";;;;;;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,UAAjC,EAA6CC,kBAA7C,EAAiEC,aAAjE,EAAgFC,WAAhF,EAA6FC,cAA7F,EAA6GC,aAA7G,QAAkI,kBAAlI;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,WAAW,EAAE,EADM;AAEnBC,EAAAA,aAAa,EAAE,EAFI;AAGnBC,EAAAA,SAAS,EAAE,IAHQ;AAInBC,EAAAA,WAAW,EAAE,KAJM;AAKnBC,EAAAA,UAAU,EAAE,KALO;AAMnBC,EAAAA,KAAK,EAAE;AANY,CAArB;;AASA,SAASC,WAAT,CAAqBC,KAAK,GAAGR,YAA7B,EAA2CS,MAA3C,EAAmD;AACjD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKlB,WAAL;AACE,+BACKgB,KADL;AAEEP,QAAAA,WAAW,EAAEQ,MAAM,CAACR,WAFtB;AAGEC,QAAAA,aAAa,EAAEO,MAAM,CAACE;AAHxB;;AAKF,SAAKlB,SAAL;AACE,+BACKe,KADL;AAEEF,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,GAAc;AAFvB;;AAIF,SAAKZ,UAAL;AACE,+BACKc,KADL;AAEEJ,QAAAA,WAAW,EAAE;AAFf;;AAIF,SAAKT,kBAAL;AACE,+BACKa,KADL;AAEEH,QAAAA,UAAU,EAAE;AAFd;;AAIF,SAAKT,aAAL;AACE,+BACKY,KADL;AAEEN,QAAAA,aAAa,EAAEO,MAAM,CAACG;AAFxB;;AAIF,SAAKf,WAAL;AACE,+BACKW,KADL;AAEEN,QAAAA,aAAa,EAAEM,KAAK,CAACN,aAAN,CAAoBW,GAApB,CACZC,CAAD,IAAOA,CAAC,CAACC,IAAF,KAAWN,MAAM,CAACO,MAAP,CAAcC,UAAzB,qBAA2CH,CAA3C;AAA8CI,UAAAA,eAAe,EAAET,MAAM,CAACO,MAAP,CAAcG;AAA7E,aAAyFL,CADnF;AAFjB;;AAMF,SAAKhB,cAAL;AACI,+BACKU,KADL;AAEEN,QAAAA,aAAa,EAAEO,MAAM,CAACP,aAFxB;AAGEC,QAAAA,SAAS,EAAEK,KAAK,CAACL,SAAN,CAAgBU,GAAhB,CAAoBO,QAAQ,IAAI;AACzC,mCACKA,QADL;AACeD,YAAAA,OAAO,EAAEV,MAAM,CAACP,aAAP,CAAqBW,GAArB,CAAyBG,MAAM,IAAI;AACvD,kBAAIK,eAAe,GAAGL,MAAM,CAACM,iBAAP,CAAyBC,SAAzB,CAAmCC,cAAc,IAAIA,cAAc,CAACC,MAAf,KAA0BL,QAAQ,CAACK,MAAxF,CAAtB;AACA,qBAAOT,MAAM,CAACE,eAAP,CAAuBG,eAAvB,CAAP;AACD,aAHqB;AADxB;AAMD,SAPU;AAHb;;AAYJ,SAAKtB,aAAL;AACE,+BACKS,KADL;AAEEL,QAAAA,SAAS,EAAEM,MAAM,CAACiB;AAFpB;;AAIF;AACE,+BACKlB,KADL;AArDJ;AAyDD;;AAED,eAAeD,WAAf","sourcesContent":["import { GET_PLAYERS, SET_STAGE, START_GAME, CHANGE_PLAYER_VIEW, SET_QUESTIONS, ADD_ANSWERS, UPDATE_PLAYERS, ADD_QUESTIONS } from \"../actions/types\";\n\nconst initialState = {\n  playerNames: [],\n  playersInRoom: [],\n  questions: null,\n  gameStarted: false,\n  playerView: false,\n  stage: 1\n}\n\nfunction gameReducer(state = initialState, action) {\n  switch (action.type) {\n    case GET_PLAYERS:\n      return {\n        ...state,\n        playerNames: action.playerNames,\n        playersInRoom: action.players\n      }\n    case SET_STAGE:\n      return {\n        ...state,\n        stage: state.stage + 1\n      }\n    case START_GAME:\n      return {\n        ...state,\n        gameStarted: true\n      }\n    case CHANGE_PLAYER_VIEW:\n      return {\n        ...state,\n        playerView: true\n      }\n    case SET_QUESTIONS:\n      return {\n        ...state,\n        playersInRoom: action.updatedPlayers\n      }\n    case ADD_ANSWERS:\n      return {\n        ...state,\n        playersInRoom: state.playersInRoom.map(\n          (p) => p.name === action.player.playerName ? { ...p, answers_round_1: action.player.answers } : p\n        )\n      }\n    case UPDATE_PLAYERS:\n        return {\n          ...state,\n          playersInRoom: action.playersInRoom,\n          questions: state.questions.map(question => {\n            return {\n              ...question, answers: action.playersInRoom.map(player => {\n                let indexOfQuestion = player.questions_round_1.findIndex(playerQuestion => playerQuestion.prompt === question.prompt)\n                return player.answers_round_1[indexOfQuestion]\n              })\n            }\n          })\n        }\n    case ADD_QUESTIONS:\n      return {\n        ...state,\n        questions: action.questionArray\n      }\n    default:\n      return {\n        ...state\n      }\n  }\n}\n\nexport default gameReducer"]},"metadata":{},"sourceType":"module"}