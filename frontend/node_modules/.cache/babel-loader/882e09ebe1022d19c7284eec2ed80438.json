{"ast":null,"code":"var _jsxFileName = \"/Users/mmevansjr/dev/mod5/quiplash_clone/frontend/src/components/Game/Game.js\";\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './Game.css';\nimport '../Timer/loadingCircle.css';\nimport { setStage, updateAnswersForVoting, addPoints, resetPointsPlayer1 } from '../../actions/gameActions';\nimport { setIsActive, setSeconds } from '../../actions/timerActions';\nimport Timer from '../Timer/Timer';\nimport { QuestionScreen } from './QuestionScreen';\nimport socket from '../socket/socket';\nexport const Game = props => {\n  const dispatch = useDispatch();\n  const stage = useSelector(state => state.game.stage);\n  const count_of_answers = useSelector(state => state.player.count_of_answers);\n  const questions_round_1 = useSelector(state => state.game.questions_round_1);\n  const selectedQuestion = useSelector(state => state.game.selectedQuestion);\n  const round_winner = useSelector(state => state.game.round_winner);\n  const round_winner_points = useSelector(state => state.game.round_winner_points);\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      dispatch(setStage());\n      dispatch(setIsActive());\n      dispatch(setSeconds(60)); // give all the players their prompts to answer on screen\n    }, 20000);\n    socket.on('ready-to-vote', ({\n      allPlayersInGame,\n      selectedQuestion\n    }) => {\n      dispatch(setIsActive());\n      dispatch(updateAnswersForVoting(allPlayersInGame, selectedQuestion));\n      dispatch(resetPointsPlayer1());\n      dispatch(setStage());\n    });\n    return () => clearTimeout(timer);\n  }, []);\n  useEffect(() => {\n    socket.on('cast-vote-round-1-to-host', (answer, callback) => {\n      console.log(\"ANSWER\", answer);\n      dispatch(addPoints(answer));\n    });\n  }, [count_of_answers]);\n\n  if (stage === 1) {\n    return React.createElement(\"div\", {\n      className: \"main-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"sp-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"sp-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      class: \"frame-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"Each player will be given random prompts to answer each round\"), React.createElement(\"h2\", {\n      class: \"frame-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"After each round of answers, you will vote on the best answer for each prompt!\"), React.createElement(\"h2\", {\n      class: \"frame-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"You will have 60 seconds for each round! \"), React.createElement(\"h2\", {\n      class: \"frame-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Good Luck!\"))));\n  }\n\n  if (stage === 2) {\n    return React.createElement(\"div\", {\n      className: \"timer-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(Timer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"loading-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"loader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }))));\n  }\n\n  if (stage === 3) {\n    return React.createElement(QuestionScreen, {\n      questions_round_1: questions_round_1,\n      selectedQuestion: selectedQuestion,\n      round_winner: round_winner,\n      round_winner_points: round_winner_points,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    });\n  }\n\n  if (stage === 4) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Next round of questions go here!\"));\n  }\n\n  return React.createElement(\"div\", {\n    className: \"game-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  });\n};\nexport default Game;","map":{"version":3,"sources":["/Users/mmevansjr/dev/mod5/quiplash_clone/frontend/src/components/Game/Game.js"],"names":["React","useEffect","useDispatch","useSelector","setStage","updateAnswersForVoting","addPoints","resetPointsPlayer1","setIsActive","setSeconds","Timer","QuestionScreen","socket","Game","props","dispatch","stage","state","game","count_of_answers","player","questions_round_1","selectedQuestion","round_winner","round_winner_points","timer","setTimeout","on","allPlayersInGame","clearTimeout","answer","callback","console","log"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport './Game.css'\nimport '../Timer/loadingCircle.css'\nimport { setStage, updateAnswersForVoting, addPoints, resetPointsPlayer1} from '../../actions/gameActions'\nimport { setIsActive, setSeconds } from '../../actions/timerActions'\nimport Timer from '../Timer/Timer'\nimport { QuestionScreen } from './QuestionScreen';\nimport socket from '../socket/socket'\n\n\nexport const Game = (props) => {\n\n    const dispatch = useDispatch();\n    const stage = useSelector(state => state.game.stage);\n    const count_of_answers = useSelector(state => state.player.count_of_answers)\n    const questions_round_1 = useSelector(state => state.game.questions_round_1)\n    const selectedQuestion = useSelector(state => state.game.selectedQuestion)\n    const round_winner = useSelector(state => state.game.round_winner)\n    const round_winner_points = useSelector(state => state.game.round_winner_points)\n\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            dispatch(setStage())\n            dispatch(setIsActive())\n            dispatch(setSeconds(60))\n            // give all the players their prompts to answer on screen\n        }, 20000);\n        socket.on('ready-to-vote', ({ allPlayersInGame, selectedQuestion }) => {\n            dispatch(setIsActive())\n            dispatch(updateAnswersForVoting(allPlayersInGame, selectedQuestion))\n            dispatch(resetPointsPlayer1())\n            dispatch(setStage())\n        })\n        return () => clearTimeout(timer);\n    }, []);\n\n    useEffect(() => {\n        socket.on('cast-vote-round-1-to-host', (answer, callback) => {\n            console.log(\"ANSWER\",answer)\n            dispatch(addPoints(answer))\n        })\n        \n    }, [count_of_answers])\n\n\n\n\n    if (stage === 1) {\n        return (\n            <div className='main-container'>\n            <div class=\"sp-container\">\n                <div class=\"sp-content\">\n                    <h2 class=\"frame-1\">Each player will be given random prompts to answer each round</h2>\n                    <h2 class=\"frame-2\">After each round of answers, you will vote on the best answer for each prompt!</h2>\n                    <h2 class=\"frame-3\">You will have 60 seconds for each round! </h2>\n                    <h2 class=\"frame-4\">Good Luck!</h2>\n                </div>\n            </div>\n        </div>\n        )\n    }\n    if (stage === 2) {\n        return (\n        <div className='timer-container'>\n                <Timer />\n            <div className='loading-container'>\n                <div class=\"loader\">\n                    <span></span>\n                    <span></span>\n                    <span></span>\n                    <span></span>\n                </div>\n                </div>\n        </div>\n        )\n    }\n    if (stage === 3) {\n        return (\n            <QuestionScreen questions_round_1={questions_round_1} selectedQuestion={selectedQuestion} round_winner={round_winner} round_winner_points={round_winner_points}/>\n        )\n    }\n    if(stage === 4) {\n        return (\n            <div>\n                <h1>Next round of questions go here!</h1>\n            </div>   \n        )\n    }\n    return (\n        <div className='game-container'>\n        </div>\n    )\n}\n\nexport default Game"]},"metadata":{},"sourceType":"module"}