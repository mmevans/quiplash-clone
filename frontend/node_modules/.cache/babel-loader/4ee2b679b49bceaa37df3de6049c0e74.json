{"ast":null,"code":"import { GET_PLAYERS, SET_STAGE, START_GAME, CHANGE_PLAYER_VIEW, SET_QUESTIONS, ADD_ANSWERS } from './types';\nimport { resolve4 } from 'dns';\nexport const getPlayersInRoom = room_id => async dispatch => {\n  const url = \"http://localhost:3000/players-in-room/\".concat(room_id);\n  var res = await fetch(url);\n  var players = await res.json();\n  var playerNames = [];\n  players.map(player => playerNames.push(player.name));\n  dispatch({\n    type: GET_PLAYERS,\n    playerNames,\n    players\n  });\n};\nexport const setStage = () => dispatch => {\n  dispatch({\n    type: SET_STAGE\n  });\n};\nexport const startingGame = () => dispatch => {\n  dispatch({\n    type: START_GAME\n  });\n};\nexport const changePlayerView = () => dispatch => {\n  dispatch({\n    type: CHANGE_PLAYER_VIEW\n  });\n};\nexport const generateQuestionsForRound = room => async dispatch => {\n  const url = 'http://localhost:3000/collectioncards';\n  var res = await fetch(url);\n  var questions = await res.json();\n  var prompts = [];\n  questions.map(question => prompts.push(question.prompt));\n  const url2 = 'http://localhost:3000/players-in-game/';\n  var res2 = await fetch(url2);\n  var allPlayers = await res2.json();\n  var playersInRoom = allPlayers.filter(player => player.room_id === room);\n  var count = 0;\n  playersInRoom.forEach(player => {\n    player.questions_round_1 = [];\n    player.questions_round_2 = [];\n    player.questions_round_3 = [];\n    player.answers_round_1 = [];\n    player.answers_round_2 = [];\n    player.answers_round_3 = [];\n  });\n\n  while (count !== playersInRoom.length) {\n    var user1 = playersInRoom[Math.floor(Math.random() * playersInRoom.length)];\n    var user2 = playersInRoom[Math.floor(Math.random() * playersInRoom.length)];\n    debugger;\n\n    if (user1.name === user2.name || user1.questions_round_1.length === 2 || user2.questions_round_1.length === 2 || user1.questions_round_1[user1.questions_round_1.length - 1] === user2.questions_round_1[user2.questions_round_1.length - 1] && user1.questions_round_1[0] !== undefined) {\n      continue;\n    }\n\n    user1.questions_round_1.push(questions[Math.floor(Math.random() * questions.length)].prompt);\n    debugger;\n    var addedQuestion = user1.questions_round_1[user1.questions_round_1.length - 1];\n    var index = questions.indexOf(addedQuestion);\n    questions.splice(index, 1);\n    debugger;\n    user2.questions_round_1.push(user1.questions_round_1[user1.questions_round_1.length - 1]); // eslint-disable-next-line no-loop-func\n\n    playersInRoom.forEach(player => {\n      if (user1.name === player.name) {\n        player.questions_round_1 = user1.questions_round_1;\n      }\n\n      if (user2.name === player.name) {\n        player.questions_round_1 = user2.questions_round_1;\n      }\n    });\n    count++;\n  }\n\n  var count2 = 0;\n\n  while (count2 !== playersInRoom.length) {\n    user1 = playersInRoom[Math.floor(Math.random() * playersInRoom.length)];\n    user2 = playersInRoom[Math.floor(Math.random() * playersInRoom.length)];\n    debugger;\n\n    if (user1.name === user2.name || user1.questions_round_2.length === 2 || user2.questions_round_2.length === 2 || user1.questions_round_2[user1.questions_round_2.length - 1] === user2.questions_round_2[user2.questions_round_2.length - 1] && user1.questions_round_2[0] !== undefined) {\n      continue;\n    }\n\n    user1.questions_round_2.push(questions[Math.floor(Math.random() * questions.length)].prompt);\n    addedQuestion = user1.questions_round_2[user1.questions_round_2.length - 1];\n    index = questions.indexOf(addedQuestion);\n    questions.splice(index, 1);\n    user2.questions_round_2.push(user1.questions_round_2[user1.questions_round_2.length - 1]); // eslint-disable-next-line no-loop-func\n\n    playersInRoom.forEach(player => {\n      if (user1.name === player.name) {\n        player.questions_round_2 = user1.questions_round_2;\n      }\n\n      if (user2.name === player.name) {\n        player.questions_round_2 = user2.questions_round_2;\n      }\n    });\n    count2++;\n  }\n\n  playersInRoom.forEach(player => {\n    player.questions_round_3.push(questions[0].prompt, questions[1].prompt);\n  });\n  const url3 = 'http://localhost:3000/update-players';\n  const settings3 = {\n    method: 'PATCH',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      playersInRoom\n    })\n  };\n  const res3 = await fetch(url3, settings3);\n  const updatedPlayers = await res3.json();\n  console.log(updatedPlayers);\n  debugger;\n};\nexport const addPlayersAnswers = player => dispatch => {\n  console.log('This object player', player);\n  dispatch({\n    type: ADD_ANSWERS,\n    player\n  });\n};","map":{"version":3,"sources":["/Users/mmevansjr/dev/mod5/frontend/src/actions/gameActions.js"],"names":["GET_PLAYERS","SET_STAGE","START_GAME","CHANGE_PLAYER_VIEW","SET_QUESTIONS","ADD_ANSWERS","resolve4","getPlayersInRoom","room_id","dispatch","url","res","fetch","players","json","playerNames","map","player","push","name","type","setStage","startingGame","changePlayerView","generateQuestionsForRound","room","questions","prompts","question","prompt","url2","res2","allPlayers","playersInRoom","filter","count","forEach","questions_round_1","questions_round_2","questions_round_3","answers_round_1","answers_round_2","answers_round_3","length","user1","Math","floor","random","user2","undefined","addedQuestion","index","indexOf","splice","count2","url3","settings3","method","headers","body","JSON","stringify","res3","updatedPlayers","console","log","addPlayersAnswers"],"mappings":"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","sourcesContent":["import { GET_PLAYERS, SET_STAGE, START_GAME, CHANGE_PLAYER_VIEW, SET_QUESTIONS, ADD_ANSWERS} from './types'\nimport { resolve4 } from 'dns';\n\nexport const getPlayersInRoom = (room_id) => async dispatch => {\n    const url = `http://localhost:3000/players-in-room/${room_id}`\n    var res = await fetch(url)\n    var players = await res.json();\n    var playerNames = [];\n    players.map((player) => (\n        playerNames.push(player.name)\n    ))\n    dispatch({\n        type: GET_PLAYERS,\n        playerNames,\n        players\n    })\n}\n\nexport const setStage = () => dispatch => {\n    dispatch({\n        type: SET_STAGE\n    })\n}\n\nexport const startingGame = () => dispatch =>  {\n    dispatch({\n        type: START_GAME\n    })\n}\n\nexport const changePlayerView = () => dispatch => {\n    dispatch({\n        type: CHANGE_PLAYER_VIEW\n    })\n}\n\nexport const generateQuestionsForRound = (room) => async dispatch => {\n\n    const url = 'http://localhost:3000/collectioncards'\n    var res = await fetch(url)\n    var questions = await res.json();\n    var prompts = [];\n    questions.map((question) => (\n        prompts.push(question.prompt)\n    ))\n\n    const url2 = 'http://localhost:3000/players-in-game/'\n    var res2 = await fetch(url2)\n    var allPlayers = await res2.json()\n\n    var playersInRoom = allPlayers.filter((player) => player.room_id === room)\n\n\n    var count = 0;\n\n    playersInRoom.forEach((player) => {\n            player.questions_round_1 = [];\n            player.questions_round_2 = [];\n            player.questions_round_3 = [];\n            player.answers_round_1 = [];\n            player.answers_round_2 = [];\n            player.answers_round_3 = [];\n    })\n\n\n    while(count !== (playersInRoom.length)) {\n        var user1 = playersInRoom[Math.floor(Math.random() * playersInRoom.length)]\n        var user2 = playersInRoom[Math.floor(Math.random() * playersInRoom.length)]\n        debugger\n        if(user1.name === user2.name || user1.questions_round_1.length === 2 || user2.questions_round_1.length === 2  || ((user1.questions_round_1[user1.questions_round_1.length-1] === user2.questions_round_1[user2.questions_round_1.length-1]) && user1.questions_round_1[0] !== undefined)) {\n            continue\n        }\n        user1.questions_round_1.push(questions[Math.floor(Math.random() * questions.length)].prompt)\n        debugger\n        var addedQuestion = user1.questions_round_1[user1.questions_round_1.length-1]\n        var index = questions.indexOf(addedQuestion)\n        questions.splice(index, 1)\n        debugger\n        user2.questions_round_1.push(user1.questions_round_1[user1.questions_round_1.length-1])\n        // eslint-disable-next-line no-loop-func\n        playersInRoom.forEach((player) => {\n            if(user1.name === player.name) {\n                player.questions_round_1 = user1.questions_round_1\n            }\n            if(user2.name === player.name) {\n                player.questions_round_1 = user2.questions_round_1\n            }\n        })\n        count++;\n    }\n\n    var count2 = 0\n    while(count2 !== (playersInRoom.length)) {\n         user1 = playersInRoom[Math.floor(Math.random() * playersInRoom.length)]\n         user2 = playersInRoom[Math.floor(Math.random() * playersInRoom.length)]\n        debugger\n        if(user1.name === user2.name || user1.questions_round_2.length === 2 || user2.questions_round_2.length === 2  || ((user1.questions_round_2[user1.questions_round_2.length-1] === user2.questions_round_2[user2.questions_round_2.length-1]) && user1.questions_round_2[0] !== undefined)) {\n            continue\n        }\n        user1.questions_round_2.push(questions[Math.floor(Math.random() * questions.length)].prompt)\n        addedQuestion = user1.questions_round_2[user1.questions_round_2.length-1]\n        index = questions.indexOf(addedQuestion)\n        questions.splice(index, 1)\n        user2.questions_round_2.push(user1.questions_round_2[user1.questions_round_2.length-1])\n        // eslint-disable-next-line no-loop-func\n        playersInRoom.forEach((player) => {\n            if(user1.name === player.name) {\n                player.questions_round_2 = user1.questions_round_2\n            }\n            if(user2.name === player.name) {\n                player.questions_round_2 = user2.questions_round_2\n            }\n        })\n        count2++;\n    }\n    playersInRoom.forEach((player) => {\n        player.questions_round_3.push(questions[0].prompt, questions[1].prompt)\n    })\n\n    const url3 = 'http://localhost:3000/update-players'\n    const settings3 = {\n        method: 'PATCH',\n        headers: \n            {\n                'Content-Type': 'application/json'\n            },\n        body: JSON.stringify({playersInRoom})\n    }\n    const res3 = await fetch(url3, settings3)\n    const updatedPlayers = await res3.json()\n    console.log(updatedPlayers)\n    debugger\n}\n\nexport const addPlayersAnswers = (player) => dispatch => {\n    console.log('This object player', player)\n    dispatch({\n        type: ADD_ANSWERS,\n        player\n    })\n\n}"]},"metadata":{},"sourceType":"module"}