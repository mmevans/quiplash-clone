{"ast":null,"code":"var _jsxFileName = \"/Users/mmevansjr/dev/mod5/frontend/src/components/PlayerView/PlayerView.js\";\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport io from 'socket.io-client';\nimport { setStage, updateAnswersForVoting } from '../../actions/gameActions';\nimport { getPlayerInfo, addPlayerAnswers, updateAnswersToState } from '../../actions/playerActions';\nimport { Form, TextArea, Button } from 'semantic-ui-react';\nimport queryString from 'query-string';\nimport $ from 'jquery';\nimport './PlayerView.css';\nconst ENDPOINT = 'localhost:3000';\nlet socket = io(ENDPOINT);\nexport const PlayerView = props => {\n  const _queryString$parse = queryString.parse(props.location.search),\n        name = _queryString$parse.name,\n        room = _queryString$parse.room,\n        lobby = _queryString$parse.lobby;\n\n  const dispatch = useDispatch();\n  const stage = useSelector(state => state.game.stage);\n  const prompt1 = useSelector(state => state.player.prompt1);\n  const prompt2 = useSelector(state => state.player.prompt2);\n  const prompt3 = useSelector(state => state.player.prompt3);\n  const prompt4 = useSelector(state => state.player.prompt4);\n  const prompt5 = useSelector(state => state.player.prompt5);\n  const prompt6 = useSelector(state => state.player.prompt6);\n  const answers_round_1 = useSelector(state => state.player.answers_round_1);\n  const answers_round_2 = useSelector(state => state.player.answers_round_2);\n  const answers_round_3 = useSelector(state => state.player.answers_round_3);\n  const questions_round_1 = useSelector(state => state.game.questions_round_1);\n  const selectedQuestion = useSelector(state => state.game.selectedQuestion);\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      dispatch(setStage());\n      dispatch(getPlayerInfo(name, room));\n    }, 5000);\n    socket.on('ready-to-vote', ({\n      allPlayersInGame,\n      selectedQuestion\n    }) => {\n      dispatch(updateAnswersForVoting(allPlayersInGame, selectedQuestion));\n      dispatch(setStage());\n    });\n    return () => clearTimeout(timer);\n  }, []);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (stage === 2) {\n      dispatch(updateAnswersToState(e.target[0].value, stage));\n      dispatch(setStage());\n      e.target.reset();\n    }\n\n    if (stage === 3) {\n      dispatch(updateAnswersToState(e.target[0].value, stage));\n      dispatch(setStage());\n    }\n  };\n\n  useEffect(() => {\n    if (answers_round_1.length === 2) {\n      dispatch(addPlayerAnswers(name, room, stage, answers_round_1));\n    }\n  }, [answers_round_1]);\n\n  const submitAnswer = answer => {\n    $(\".voting-buttons\").hide();\n    socket.emit('cast-vote-round-1', answer, room, () => {});\n  };\n\n  if (stage === 1) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Get Ready!\"));\n  }\n\n  if (stage === 2) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"playerQuestionForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, prompt1 !== undefined ? prompt1 : null), React.createElement(Form, {\n      onSubmit: e => handleSubmit(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(TextArea, {\n      placeholder: \"Answer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), React.createElement(Button, {\n      fluid: true,\n      color: \"red\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"Next Question\"))), React.createElement(\"div\", {\n      className: \"playerScreenFriend\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: \"https://jackboxgames.com/wp-content/uploads/2019/07/Blue.gif\",\n      alt: \"happy quiplash guy\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    })));\n  }\n\n  if (stage === 3) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"playerQuestionForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, prompt2 !== undefined ? prompt2 : null), React.createElement(Form, {\n      onSubmit: e => handleSubmit(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(TextArea, {\n      placeholder: \"Answer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), React.createElement(Button, {\n      fluid: true,\n      color: \"red\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Submit\"))), React.createElement(\"div\", {\n      className: \"playerScreenFriend\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: \"https://jackboxgames.com/wp-content/uploads/2019/07/Blue.gif\",\n      alt: \"happy quiplash guy\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    })));\n  }\n\n  if (stage === 4) {\n    return React.createElement(\"div\", {\n      class: \"waitingScreenInGame\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"Waiting on other players\"));\n  }\n\n  if (stage === 5) {\n    return React.createElement(\"div\", {\n      className: \"votingScreen\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"Cast Your Vote Now!\"), React.createElement(\"div\", {\n      className: \"voting-buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, questions_round_1[selectedQuestion].answers.map((answer, i) => React.createElement(Button, {\n      size: \"massive\",\n      className: \"answer\".concat(i),\n      onClick: e => submitAnswer(answer),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \" Answer \", i, \" \")), React.createElement(\"h1\", {\n      id: \"votingOR\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"OR\")));\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, \"Get Ready!\"));\n};\nexport default PlayerView;","map":{"version":3,"sources":["/Users/mmevansjr/dev/mod5/frontend/src/components/PlayerView/PlayerView.js"],"names":["React","useEffect","useDispatch","useSelector","io","setStage","updateAnswersForVoting","getPlayerInfo","addPlayerAnswers","updateAnswersToState","Form","TextArea","Button","queryString","$","ENDPOINT","socket","PlayerView","props","parse","location","search","name","room","lobby","dispatch","stage","state","game","prompt1","player","prompt2","prompt3","prompt4","prompt5","prompt6","answers_round_1","answers_round_2","answers_round_3","questions_round_1","selectedQuestion","timer","setTimeout","on","allPlayersInGame","clearTimeout","handleSubmit","e","preventDefault","target","value","reset","length","submitAnswer","answer","hide","emit","undefined","answers","map","i"],"mappings":"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","sourcesContent":["import React, {useEffect} from 'react'\nimport {useDispatch, useSelector} from 'react-redux';\nimport io from 'socket.io-client';\nimport {setStage, updateAnswersForVoting} from '../../actions/gameActions'\nimport {getPlayerInfo, addPlayerAnswers, updateAnswersToState} from '../../actions/playerActions'\nimport {Form, TextArea, Button} from 'semantic-ui-react'\nimport queryString from 'query-string';\nimport $ from 'jquery';\nimport './PlayerView.css'\n\n\nconst ENDPOINT = 'localhost:3000'\nlet socket = io(ENDPOINT)\n\nexport const PlayerView = (props) => {\n    const {name, room, lobby} = queryString.parse(props.location.search)\n\n    const dispatch = useDispatch();\n    const stage = useSelector(state => state.game.stage);\n    const prompt1 = useSelector(state => state.player.prompt1)\n    const prompt2 = useSelector(state => state.player.prompt2)\n    const prompt3 = useSelector(state => state.player.prompt3)\n    const prompt4 = useSelector(state => state.player.prompt4)\n    const prompt5 = useSelector(state => state.player.prompt5)\n    const prompt6 = useSelector(state => state.player.prompt6)\n    const answers_round_1 = useSelector(state => state.player.answers_round_1)\n    const answers_round_2 = useSelector(state => state.player.answers_round_2)\n    const answers_round_3 = useSelector(state => state.player.answers_round_3)\n\n    const questions_round_1 = useSelector(state => state.game.questions_round_1)\n    const selectedQuestion = useSelector(state => state.game.selectedQuestion)\n\n    useEffect(() => {\n        const timer = setTimeout(() => {\n        dispatch(setStage())\n        dispatch(getPlayerInfo(name, room))\n        }, 5000);\n\n        socket.on('ready-to-vote', ({ allPlayersInGame, selectedQuestion }) => {\n            dispatch(updateAnswersForVoting(allPlayersInGame, selectedQuestion))\n            dispatch(setStage())\n        })\n\n\n        return () => clearTimeout(timer);\n      }, []);\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if(stage === 2) {\n            dispatch(updateAnswersToState(e.target[0].value, stage))\n            dispatch(setStage())\n            e.target.reset()\n        }\n        if(stage === 3) {\n            dispatch(updateAnswersToState(e.target[0].value, stage))\n            dispatch(setStage())\n        }\n    }\n\n    useEffect(() => {\n        if(answers_round_1.length === 2) {\n            dispatch(addPlayerAnswers(name, room, stage, answers_round_1))\n        }\n     \n    }, [answers_round_1])\n\n    const submitAnswer = (answer) => {\n        $(\".voting-buttons\").hide()\n        socket.emit('cast-vote-round-1', answer, room, () => {\n        })\n    }\n\n    if(stage === 1) {\n        return (\n            <div>\n                <h1>Get Ready!</h1>\n            </div>\n        )\n    }\n    if(stage === 2) {\n        return (\n        <div>\n            <div className='playerQuestionForm'>\n                <h1>{prompt1 !== undefined ? prompt1 : null}</h1>\n                    <Form onSubmit={(e) => handleSubmit(e)}>\n                        <TextArea placeholder='Answer'/>\n                        <Button fluid color='red'>Next Question</Button>\n                    </Form>\n            </div>\n            <div className='playerScreenFriend'>\n                <img src='https://jackboxgames.com/wp-content/uploads/2019/07/Blue.gif' alt='happy quiplash guy'></img>\n            </div>\n        </div>\n        )  \n    }\n    if(stage === 3) {\n        return (\n            <div>\n            <div className='playerQuestionForm'>\n                <h1>{prompt2 !== undefined ? prompt2 : null}</h1>\n                    <Form onSubmit={(e) => handleSubmit(e)}>\n                        <TextArea placeholder='Answer'/>\n                        <Button fluid color='red'>Submit</Button>\n                    </Form>\n            </div>\n            <div className='playerScreenFriend'>\n                <img src='https://jackboxgames.com/wp-content/uploads/2019/07/Blue.gif' alt='happy quiplash guy'></img>\n            </div>\n        </div>\n        )\n    }\n    if(stage === 4) {\n        return (\n            <div class='waitingScreenInGame'>\n                <h2>Waiting on other players</h2>\n            </div>\n        )\n    }\n    if(stage === 5) {\n        return (\n            <div className='votingScreen'>\n                <h1>Cast Your Vote Now!</h1>\n                <div className='voting-buttons'>\n                    {questions_round_1[selectedQuestion].answers.map( (answer, i) => (\n                        <Button size='massive' className={`answer${i}`}onClick={(e) => submitAnswer(answer)}> Answer {i} </Button>\n                    ))}\n                    <h1 id='votingOR'>OR</h1>\n                </div>\n            </div>\n        )\n    }\n    return (\n        <div>\n            <h1>Get Ready!</h1> \n        </div>\n    )\n}\n\nexport default PlayerView"]},"metadata":{},"sourceType":"module"}