{"ast":null,"code":"import { GET_PLAYERS, SET_STAGE, START_GAME, CHANGE_PLAYER_VIEW, ADD_ANSWERS, UPDATE_ROUND_1, ADD_QUESTIONS, SAVE_QUESTIONS } from './types';\nexport const getPlayersInRoom = room_id => async dispatch => {\n  const url = \"http://localhost:3000/players-in-room/\".concat(room_id);\n  var res = await fetch(url);\n  var players = await res.json();\n  var playerNames = [];\n  players.map(player => playerNames.push(player.name));\n  dispatch({\n    type: GET_PLAYERS,\n    playerNames,\n    players\n  });\n};\nexport const setStage = () => dispatch => {\n  dispatch({\n    type: SET_STAGE\n  });\n};\nexport const startingGame = () => dispatch => {\n  dispatch({\n    type: START_GAME\n  });\n};\nexport const changePlayerView = () => dispatch => {\n  dispatch({\n    type: CHANGE_PLAYER_VIEW\n  });\n};\nexport const generateQuestions = room => async dispatch => {\n  const url = 'http://localhost:3000/generate-questions';\n  var res = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      room\n    })\n  });\n\n  var _ref = await res.json(),\n      questions_round_1 = _ref.questions_round_1,\n      questions_round_2 = _ref.questions_round_2;\n\n  dispatch({\n    type: ADD_QUESTIONS,\n    questions_round_1,\n    questions_round_2\n  });\n};\nexport const addPlayersAnswers = player => dispatch => {\n  dispatch({\n    type: ADD_ANSWERS,\n    player\n  });\n};\nexport const updateAnswersForVoting = (allPlayersInGame, selectedQuestion) => dispatch => {\n  dispatch({\n    type: UPDATE_ROUND_1,\n    allPlayersInGame,\n    selectedQuestion\n  });\n};\nexport const saveQuestions = questions => dispatch => {\n  dispatch({\n    type: SAVE_QUESTIONS,\n    questions\n  });\n}; // this will be how many questions will be answered in the round","map":{"version":3,"sources":["/Users/mmevansjr/dev/mod5/frontend/src/actions/gameActions.js"],"names":["GET_PLAYERS","SET_STAGE","START_GAME","CHANGE_PLAYER_VIEW","ADD_ANSWERS","UPDATE_ROUND_1","ADD_QUESTIONS","SAVE_QUESTIONS","getPlayersInRoom","room_id","dispatch","url","res","fetch","players","json","playerNames","map","player","push","name","type","setStage","startingGame","changePlayerView","generateQuestions","room","method","headers","body","JSON","stringify","questions_round_1","questions_round_2","addPlayersAnswers","updateAnswersForVoting","allPlayersInGame","selectedQuestion","saveQuestions","questions"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,UAAjC,EAA6CC,kBAA7C,EAAiEC,WAAjE,EAA8EC,cAA9E,EAA8FC,aAA9F,EAA6GC,cAA7G,QAAkI,SAAlI;AAEA,OAAO,MAAMC,gBAAgB,GAAIC,OAAD,IAAa,MAAMC,QAAN,IAAkB;AAC3D,QAAMC,GAAG,mDAA4CF,OAA5C,CAAT;AACA,MAAIG,GAAG,GAAG,MAAMC,KAAK,CAACF,GAAD,CAArB;AACA,MAAIG,OAAO,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAApB;AACA,MAAIC,WAAW,GAAG,EAAlB;AACAF,EAAAA,OAAO,CAACG,GAAR,CAAaC,MAAD,IACRF,WAAW,CAACG,IAAZ,CAAiBD,MAAM,CAACE,IAAxB,CADJ;AAGAV,EAAAA,QAAQ,CAAC;AACLW,IAAAA,IAAI,EAAErB,WADD;AAELgB,IAAAA,WAFK;AAGLF,IAAAA;AAHK,GAAD,CAAR;AAKH,CAbM;AAeP,OAAO,MAAMQ,QAAQ,GAAG,MAAMZ,QAAQ,IAAI;AACtCA,EAAAA,QAAQ,CAAC;AACLW,IAAAA,IAAI,EAAEpB;AADD,GAAD,CAAR;AAGH,CAJM;AAMP,OAAO,MAAMsB,YAAY,GAAG,MAAMb,QAAQ,IAAK;AAC3CA,EAAAA,QAAQ,CAAC;AACLW,IAAAA,IAAI,EAAEnB;AADD,GAAD,CAAR;AAGH,CAJM;AAMP,OAAO,MAAMsB,gBAAgB,GAAG,MAAMd,QAAQ,IAAI;AAC9CA,EAAAA,QAAQ,CAAC;AACLW,IAAAA,IAAI,EAAElB;AADD,GAAD,CAAR;AAGH,CAJM;AAMP,OAAO,MAAMsB,iBAAiB,GAAIC,IAAD,IAAU,MAAMhB,QAAN,IAAkB;AAEzD,QAAMC,GAAG,GAAG,0CAAZ;AACA,MAAIC,GAAG,GAAG,MAAMC,KAAK,CAACF,GAAD,EAAM;AACvBgB,IAAAA,MAAM,EAAE,MADe;AAEvBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFc;AAGvBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBL,MAAAA;AADiB,KAAf;AAHiB,GAAN,CAArB;;AAHyD,aAUX,MAAMd,GAAG,CAACG,IAAJ,EAVK;AAAA,MAUnDiB,iBAVmD,QAUnDA,iBAVmD;AAAA,MAUhCC,iBAVgC,QAUhCA,iBAVgC;;AAYzDvB,EAAAA,QAAQ,CAAC;AACLW,IAAAA,IAAI,EAAEf,aADD;AAEL0B,IAAAA,iBAFK;AAGLC,IAAAA;AAHK,GAAD,CAAR;AAKH,CAjBM;AAmBP,OAAO,MAAMC,iBAAiB,GAAIhB,MAAD,IAAYR,QAAQ,IAAI;AACrDA,EAAAA,QAAQ,CAAC;AACLW,IAAAA,IAAI,EAAEjB,WADD;AAELc,IAAAA;AAFK,GAAD,CAAR;AAIH,CALM;AAOP,OAAO,MAAMiB,sBAAsB,GAAG,CAACC,gBAAD,EAAmBC,gBAAnB,KAAwC3B,QAAQ,IAAI;AACtFA,EAAAA,QAAQ,CAAC;AACLW,IAAAA,IAAI,EAAEhB,cADD;AAEL+B,IAAAA,gBAFK;AAGLC,IAAAA;AAHK,GAAD,CAAR;AAKH,CANM;AAQP,OAAO,MAAMC,aAAa,GAAIC,SAAD,IAAe7B,QAAQ,IAAI;AACpDA,EAAAA,QAAQ,CAAC;AACLW,IAAAA,IAAI,EAAEd,cADD;AAELgC,IAAAA;AAFK,GAAD,CAAR;AAIH,CALM,C,CAMP","sourcesContent":["import { GET_PLAYERS, SET_STAGE, START_GAME, CHANGE_PLAYER_VIEW, ADD_ANSWERS, UPDATE_ROUND_1, ADD_QUESTIONS, SAVE_QUESTIONS} from './types'\n\nexport const getPlayersInRoom = (room_id) => async dispatch => {\n    const url = `http://localhost:3000/players-in-room/${room_id}`\n    var res = await fetch(url)\n    var players = await res.json();\n    var playerNames = [];\n    players.map((player) => (\n        playerNames.push(player.name)\n    ))\n    dispatch({\n        type: GET_PLAYERS,\n        playerNames,\n        players\n    })\n}\n\nexport const setStage = () => dispatch => {\n    dispatch({\n        type: SET_STAGE\n    })\n}\n\nexport const startingGame = () => dispatch =>  {\n    dispatch({\n        type: START_GAME\n    })\n}\n\nexport const changePlayerView = () => dispatch => {\n    dispatch({\n        type: CHANGE_PLAYER_VIEW\n    })\n}\n\nexport const generateQuestions = (room) => async dispatch => {\n\n    const url = 'http://localhost:3000/generate-questions'\n    var res = await fetch(url, { \n        method: \"POST\",\n        headers: { 'Content-Type': 'application/json'},\n        body: JSON.stringify({\n            room\n        })\n    })\n    var { questions_round_1, questions_round_2} = await res.json();\n\n    dispatch({\n        type: ADD_QUESTIONS,\n        questions_round_1,\n        questions_round_2\n    })\n}\n\nexport const addPlayersAnswers = (player) => dispatch => {\n    dispatch({\n        type: ADD_ANSWERS,\n        player\n    })\n}\n\nexport const updateAnswersForVoting = (allPlayersInGame, selectedQuestion) => dispatch => {\n    dispatch({\n        type: UPDATE_ROUND_1,\n        allPlayersInGame,\n        selectedQuestion\n    })\n}\n\nexport const saveQuestions = (questions) => dispatch => {\n    dispatch({\n        type: SAVE_QUESTIONS,\n        questions\n    })\n}\n// this will be how many questions will be answered in the round"]},"metadata":{},"sourceType":"module"}