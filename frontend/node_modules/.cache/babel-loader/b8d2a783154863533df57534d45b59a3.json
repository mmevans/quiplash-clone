{"ast":null,"code":"var _jsxFileName = \"/Users/mmevansjr/dev/mod5/frontend/src/components/Game/MainLobby.js\";\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\nimport { setName, setRoom } from '../../actions/joinRoomActions';\nimport { getStandardDeck, setMessages } from '../../actions/gameActions';\nimport { all } from 'q';\nlet socket;\nexport const MainLobby = props => {\n  const dispatch = useDispatch();\n  const roomId = useSelector(state => state.joinRoom.room_id);\n  const username = useSelector(state => state.joinRoom.name);\n  const deck = useSelector(state => state.game.prompts);\n  const deckName = useSelector(state => state.game.deckName);\n  const allMessages = useSelector(state => state.game.messages);\n  const message = useSelector(state => state.game.message);\n  const ENDPOINT = 'localhost:3000';\n  const test = useSelector(state => state.game.test);\n  useEffect(() => {\n    const _queryString$parse = queryString.parse(props.location.search),\n          name = _queryString$parse.name,\n          room = _queryString$parse.room;\n\n    socket = io(ENDPOINT);\n    dispatch(setName(name));\n    dispatch(setRoom(room));\n    dispatch(getStandardDeck());\n    socket.emit('join', {\n      name,\n      room\n    }, () => {});\n    return () => {\n      socket.emit('disconnect');\n      socket.off();\n    };\n  }, [ENDPOINT]);\n  useEffect(() => {\n    socket.on('message', message => {\n      dispatch(setMessages(message));\n    });\n  }, [allMessages]);\n  console.log(allMessages);\n\n  const sendMessage = event => {\n    event.preventDefault();\n\n    if (message) {\n      socket.emit('sendMessage', message, () => setMessages(''));\n    }\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"Main Lobby\"), React.createElement(\"input\", {\n    value: message,\n    onChange: e => setMessages(e.target.value),\n    onKeyPress: event => event.key === 'Enter' ? sendMessage(event) : null,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, allMessages.length ? allMessages.text : React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, \"If no Messages are rendered\")));\n};\nexport default MainLobby;","map":{"version":3,"sources":["/Users/mmevansjr/dev/mod5/frontend/src/components/Game/MainLobby.js"],"names":["React","useEffect","useDispatch","useSelector","queryString","io","setName","setRoom","getStandardDeck","setMessages","all","socket","MainLobby","props","dispatch","roomId","state","joinRoom","room_id","username","name","deck","game","prompts","deckName","allMessages","messages","message","ENDPOINT","test","parse","location","search","room","emit","off","on","console","log","sendMessage","event","preventDefault","e","target","value","key","length","text"],"mappings":"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","sourcesContent":["import React, {useEffect} from 'react'\nimport {useDispatch, useSelector} from 'react-redux';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\nimport {setName, setRoom} from '../../actions/joinRoomActions'\nimport {getStandardDeck, setMessages} from '../../actions/gameActions'\nimport { all } from 'q';\n\n\nlet socket;\n\n\nexport const MainLobby = (props) => {\n    const dispatch = useDispatch();\n    const roomId = useSelector(state => state.joinRoom.room_id)\n    const username = useSelector(state => state.joinRoom.name)\n    const deck = useSelector(state => state.game.prompts)\n    const deckName = useSelector(state => state.game.deckName)\n    const allMessages = useSelector(state => state.game.messages)\n    const message = useSelector(state => state.game.message)\n    const ENDPOINT = 'localhost:3000'\n    const test = useSelector(state => state.game.test)\n\n    \n    useEffect(() => {\n        const {name, room} = queryString.parse(props.location.search)\n        socket = io(ENDPOINT);\n        dispatch(setName(name))\n        dispatch(setRoom(room))\n        dispatch(getStandardDeck())\n        \n        socket.emit('join',  {name, room}, () => {\n\n        });\n\n        return() => {\n            socket.emit('disconnect');\n            \n            socket.off();\n        }\n    }, [ENDPOINT])\n\n    useEffect(() => {\n        socket.on('message', (message) => {\n            dispatch(setMessages(message));\n        })\n    }, [allMessages])\n    console.log(allMessages)\n    const sendMessage = (event) => {\n        event.preventDefault();\n        if(message) {\n            socket.emit('sendMessage', message, () => setMessages(''));\n        }\n    }\n\n    return (\n        <div>\n            <h1>Main Lobby</h1>\n            <input \n            value={message} \n            onChange={(e) => setMessages(e.target.value)}\n            onKeyPress={event => event.key === 'Enter' ? sendMessage(event) : null}/>\n            <div>\n                {allMessages.length ? allMessages.text : <p>If no Messages are rendered</p>}\n            </div>\n        </div>\n    )\n}\n\nexport default MainLobby"]},"metadata":{},"sourceType":"module"}