{"ast":null,"code":"import _defineProperty from \"/Users/mmevansjr/dev/mod5/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { GET_PLAYERS, SET_STAGE, START_GAME, CHANGE_PLAYER_VIEW, SET_QUESTIONS, UPDATE_ROUND_1, ADD_QUESTIONS, ADD_POINTS } from \"../actions/types\";\nconst initialState = {\n  playerNames: [],\n  playersInRoom: [],\n  questions_round_1: null,\n  questions_round_2: null,\n  gameStarted: false,\n  playerView: false,\n  stage: 1\n};\n\nfunction gameReducer(state = initialState, action) {\n  switch (action.type) {\n    case GET_PLAYERS:\n      return _objectSpread({}, state, {\n        playerNames: action.playerNames,\n        playersInRoom: action.players\n      });\n\n    case SET_STAGE:\n      return _objectSpread({}, state, {\n        stage: state.stage + 1\n      });\n\n    case START_GAME:\n      return _objectSpread({}, state, {\n        gameStarted: true\n      });\n\n    case CHANGE_PLAYER_VIEW:\n      return _objectSpread({}, state, {\n        playerView: true\n      });\n\n    case SET_QUESTIONS:\n      return _objectSpread({}, state, {\n        playersInRoom: action.updatedPlayers\n      });\n\n    case UPDATE_ROUND_1:\n      return _objectSpread({}, state, {\n        selectedQuestion: action.selectedQuestion,\n        playersInRoom: action.allPlayersInGame,\n        questions_round_1: state.questions_round_1.map(question => {\n          return _objectSpread({}, question, {\n            answers: action.allPlayersInGame.filter(player => question.players.includes(player.name)).map(player => {\n              let indexOfQuestion = player.questions_round_1.findIndex(playerQuestion => playerQuestion.prompt === question.prompt);\n              return player.answers_round_1[indexOfQuestion];\n            })\n          });\n        })\n      });\n\n    case ADD_QUESTIONS:\n      return _objectSpread({}, state, {\n        questions_round_1: action.questions_round_1,\n        questions_round_2: action.question_round_2\n      });\n\n    case ADD_POINTS:\n      if (action.count_of_answers <= 4 && action.index === 0) {\n        return _objectSpread({}, state, {\n          question_round_1: state.questions_round_1.map((question, i) => i === 0 ? _objectSpread({}, question, {\n            points_player_1: state.points_player_1 + 1\n          }) : question)\n        });\n      }\n\n      if (action.count_of_answers <= 4 && action.index === 1) {\n        return _objectSpread({}, state, {\n          question_round_1: state.questions_round_1.map((question, i) => i === 0 ? _objectSpread({}, question, {\n            points_player_2: state.points_player_2 + 1\n          }) : question)\n        });\n      }\n\n    default:\n      return _objectSpread({}, state);\n  }\n}\n\nexport default gameReducer;","map":{"version":3,"sources":["/Users/mmevansjr/dev/mod5/frontend/src/reducers/gameReducer.js"],"names":["GET_PLAYERS","SET_STAGE","START_GAME","CHANGE_PLAYER_VIEW","SET_QUESTIONS","UPDATE_ROUND_1","ADD_QUESTIONS","ADD_POINTS","initialState","playerNames","playersInRoom","questions_round_1","questions_round_2","gameStarted","playerView","stage","gameReducer","state","action","type","players","updatedPlayers","selectedQuestion","allPlayersInGame","map","question","answers","filter","player","includes","name","indexOfQuestion","findIndex","playerQuestion","prompt","answers_round_1","question_round_2","count_of_answers","index","question_round_1","i","points_player_1","points_player_2"],"mappings":"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","sourcesContent":["import { GET_PLAYERS, SET_STAGE, START_GAME, CHANGE_PLAYER_VIEW, SET_QUESTIONS, UPDATE_ROUND_1, ADD_QUESTIONS, ADD_POINTS } from \"../actions/types\";\n\nconst initialState = {\n  playerNames: [],\n  playersInRoom: [],\n  questions_round_1: null,\n  questions_round_2: null,\n  gameStarted: false,\n  playerView: false,\n  stage: 1\n}\n\nfunction gameReducer(state = initialState, action) {\n  switch (action.type) {\n    case GET_PLAYERS:\n      return {\n        ...state,\n        playerNames: action.playerNames,\n        playersInRoom: action.players\n      }\n    case SET_STAGE:\n      return {\n        ...state,\n        stage: state.stage + 1\n      }\n    case START_GAME:\n      return {\n        ...state,\n        gameStarted: true\n      }\n    case CHANGE_PLAYER_VIEW:\n      return {\n        ...state,\n        playerView: true\n      }\n    case SET_QUESTIONS:\n      return {\n        ...state,\n        playersInRoom: action.updatedPlayers\n      }\n    case UPDATE_ROUND_1:\n      return {\n        ...state,\n        selectedQuestion: action.selectedQuestion,\n        playersInRoom: action.allPlayersInGame,\n        questions_round_1: state.questions_round_1.map(question => {\n          return {\n            ...question, answers: action.allPlayersInGame\n              .filter(player => question.players.includes(player.name))\n              .map(player => {\n                let indexOfQuestion = player.questions_round_1.findIndex(playerQuestion => playerQuestion.prompt === question.prompt)\n                return player.answers_round_1[indexOfQuestion]\n              })\n          }\n        })\n      }\n    case ADD_QUESTIONS:\n      return {\n        ...state,\n        questions_round_1: action.questions_round_1,\n        questions_round_2: action.question_round_2\n      }\n    case ADD_POINTS:\n      if (action.count_of_answers <= 4 && action.index === 0) {\n        return {\n          ...state,\n          question_round_1: state.questions_round_1.map(\n            (question, i) => i === 0 ? { ...question, points_player_1: state.points_player_1 + 1 } : question\n          )\n        }\n      }\n      if (action.count_of_answers <= 4 && action.index === 1) {\n        return {\n          ...state,\n          question_round_1: state.questions_round_1.map(\n            (question, i) => i === 0 ? { ...question, points_player_2: state.points_player_2 + 1 } : question\n          )\n        }\n      }\n    default:\n  return {\n    ...state\n  }\n}\n}\n\nexport default gameReducer\n"]},"metadata":{},"sourceType":"module"}